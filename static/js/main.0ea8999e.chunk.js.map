{"version":3,"sources":["cube.svg","util.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["zeroPad","num","toString","Wrapper","styled","div","hueRotate","keyframes","translate","StyledTextfit","Textfit","CubeBackground","cube","App","time","useState","Date","displayedDate","setDisplayedDate","timeout","setTimeout","update","now","millisUntilNextUpdate","getSeconds","useEffect","clearTimeout","getHours","getMinutes","useTime","mode","forceSingleModeWidth","min","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAAe,G,MAAA,IAA0B,kC,uBC4BzC,SAASA,EAAQC,GACb,OAAIA,EAAM,GACA,IAAN,OAAWA,GAEJA,EAAIC,W,qBCVnB,IAAMC,EAAUC,IAAOC,IAAV,oIASPC,EAAYC,YAAH,0HAUTC,EAAYD,YAAH,4IAWTE,EAAgBL,YAAOM,UAAPN,CAAH,8UASJE,GAKTK,EAAiBP,IAAOC,IAAV,8PACAO,EAOLJ,GAGAK,EArEf,WAEE,IAAMC,EDPD,WAAoB,IAAD,EACoBC,mBAAS,IAAIC,MADjC,mBACfC,EADe,KACAC,EADA,KAGlBC,EAAUC,YAEd,SAASC,IACL,IAAMC,EAAM,IAAIN,KAChBE,EAAiBI,GACjB,IAAMC,EAAkD,KAAzB,GAAKD,EAAIE,cAAuB,EAC/DL,EAAUC,WAAWC,EAAQE,KANA,GAejC,OAJAE,qBAAU,WACN,OAAO,kBAAMC,aAAaP,OAGvBnB,EAAQiB,EAAcU,WAAa,IACvC,IACA3B,EAAQiB,EAAcW,cCbdC,GAEb,OACE,eAAC1B,EAAD,WACE,cAACQ,EAAD,IACA,cAACF,EAAD,CAAeqB,KAAK,SAASC,sBAAsB,EAAOC,IAAK,GAAIC,IAAK,IAAxE,SACGnB,QCFMoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0ea8999e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cube.ffbc2114.svg\";","import { time } from \"console\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport function useTime() {\r\n    const [displayedDate, setDisplayedDate] = useState(new Date())\r\n\r\n    var timeout = setTimeout(update, 0);\r\n\r\n    function update() {\r\n        const now = new Date();\r\n        setDisplayedDate(now);\r\n        const millisUntilNextUpdate = (60 - now.getSeconds()) * 1000 + 5;\r\n        timeout = setTimeout(update, millisUntilNextUpdate);\r\n    }\r\n\r\n\r\n    // cleanup\r\n    useEffect(() => {\r\n        return () => clearTimeout(timeout);\r\n    });\r\n\r\n    return zeroPad(displayedDate.getHours() % 12)\r\n     + \":\"\r\n     + zeroPad(displayedDate.getMinutes())\r\n}\r\n\r\n/// Given a positive integer, returns it as a string\r\n/// Zero-pads it to two digits, e.g. 5 -> 05\r\nfunction zeroPad(num: number): string {\r\n    if (num < 10)\r\n        return `0${num}`\r\n    else\r\n        return num.toString()\r\n}","import React from 'react';\nimport './App.css';\nimport cube from './cube.svg'\nimport styled, { keyframes } from 'styled-components';\n// @ts-ignore\nimport { Textfit } from 'react-textfit';\nimport { useTime } from './util';\n\nfunction App() {\n\n  const time = useTime()\n\n  return (\n    <Wrapper>\n      <CubeBackground />\n      <StyledTextfit mode=\"single\" forceSingleModeWidth={false} min={50} max={2000}>\n        {time}\n      </StyledTextfit>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  position: absolute;\n  left: 0;\n  right: 0;\n`;\n\nconst hueRotate = keyframes`\n  from {\n    filter: hue-rotate(0deg);\n  }\n\n  to {\n    filter: hue-rotate(360deg);\n  }\n`;\n\nconst translate = keyframes`\n  from {\n    transform: translate(-156px, -300px);\n\n  }\n\n  to {\n    transform: translate(0px, 0px);\n  }\n`;\n\nconst StyledTextfit = styled(Textfit)`\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  font-weight: 900;\n  font-family: 'Arial Black', 'Arial', sans-serif;\n  color: hsl(220deg, 50%, 50%);\n  background-color: hsl(120deg, 50%, 50%);\n  mix-blend-mode: hue;\n  animation: ${hueRotate} linear infinite 40s;\n  z-index: 2;\n  position: absolute;\n`;\n\nconst CubeBackground = styled.div`\n  background: url(${cube});\n  background-repeat: repeat;\n  width: calc(100vw + 156px);\n  height: calc(100vh + 300px);\n  z-index: 1;\n  position: absolute;\n  background-size: 156px 300px;\n  animation: ${translate} linear infinite 3s;\n`;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}