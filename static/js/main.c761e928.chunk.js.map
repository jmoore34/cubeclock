{"version":3,"sources":["cube.svg","App.tsx","util.ts","reportWebVitals.ts","index.tsx"],"names":["Wrapper","styled","div","props","hideCursor","hueRotate","keyframes","translate","StyledTextfit","Textfit","CubeBackground","cube","App","time","useState","Date","displayedDate","setDisplayedDate","timeout","setTimeout","update","now","millisUntilNextUpdate","getSeconds","useEffect","clearTimeout","num","hour","getHours","getMinutes","toString","useTime","onClick","e","screenfull","isEnabled","toggle","document","documentElement","isFullscreen","mode","forceSingleModeWidth","min","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4MAAe,G,MAAA,IAA0B,kC,4DCuBzC,IAAMA,EAAUC,IAAOC,IAAV,2IAOT,SAAAC,GAAK,OAAIA,EAAMC,YAAc,mBAG3BC,EAAYC,YAAH,0HAUTC,EAAYD,YAAH,4IAWTE,EAAgBP,YAAOQ,UAAPR,CAAH,+aASJI,GASTK,EAAiBT,IAAOC,IAAV,8PACAS,EAOLJ,GAGAK,EA1Ef,WAEE,IAAMC,ECTD,WAAoB,IAAD,EACoBC,mBAAS,IAAIC,MADjC,mBACfC,EADe,KACAC,EADA,KAGlBC,EAAUC,YAEd,SAASC,IACL,IAAMC,EAAM,IAAIN,KAChBE,EAAiBI,GACjB,IAAMC,EAAkD,KAAzB,GAAKD,EAAIE,cAAuB,EAC/DL,EAAUC,WAAWC,EAAQE,KANA,GAWjCE,qBAAU,WACN,OAAO,kBAAMC,aAAaP,OAG9B,IAWaQ,EAXTC,EAAOX,EAAcY,WAAa,GAItC,OAHa,IAATD,IACJA,EAAO,IAEAA,EACJ,MAMUD,EALFV,EAAca,cAMf,GACA,IAAN,OAAWH,GAEJA,EAAII,YDxBJC,GAEb,OACE,eAAC/B,EAAD,CAASgC,QAAS,SAAAC,GAAC,OAAIC,IAAWC,WAAaD,IAAWE,OAAOC,SAASC,kBAAkBlC,WAAY8B,IAAWC,WAAaD,IAAWK,aAA3I,UACE,cAAC7B,EAAD,IACA,cAACF,EAAD,CAAegC,KAAK,SAASC,sBAAsB,EAAOC,IAAK,GAAIC,IAAK,IAAxE,SACG9B,QEHM+B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,SAM1BZ,M","file":"static/js/main.c761e928.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cube.ffbc2114.svg\";","import React from 'react';\r\nimport './App.css';\r\nimport cube from './cube.svg'\r\nimport styled, { keyframes } from 'styled-components';\r\n// @ts-ignore\r\nimport { Textfit } from 'react-textfit';\r\nimport { useTime } from './util';\r\nimport screenfull from 'screenfull';\r\n\r\nfunction App() {\r\n\r\n  const time = useTime()\r\n\r\n  return (\r\n    <Wrapper onClick={e => screenfull.isEnabled && screenfull.toggle(document.documentElement)} hideCursor={screenfull.isEnabled && screenfull.isFullscreen}>\r\n      <CubeBackground />\r\n      <StyledTextfit mode=\"single\" forceSingleModeWidth={false} min={50} max={2000}>\r\n        {time}\r\n      </StyledTextfit>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div<{hideCursor: boolean}>`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  ${props => props.hideCursor && \"cursor: none;\"}\r\n`;\r\n\r\nconst hueRotate = keyframes`\r\n  from {\r\n    filter: hue-rotate(0deg);\r\n  }\r\n\r\n  to {\r\n    filter: hue-rotate(360deg);\r\n  }\r\n`;\r\n\r\nconst translate = keyframes`\r\n  from {\r\n    transform: translate(-156px, -300px);\r\n\r\n  }\r\n\r\n  to {\r\n    transform: translate(0px, 0px);\r\n  }\r\n`;\r\n\r\nconst StyledTextfit = styled(Textfit)`\r\n  width: 100%;\r\n  height: 100%;\r\n  text-align: center;\r\n  font-weight: 900;\r\n  font-family: 'Arial Black', 'Arial', sans-serif;\r\n  color: hsl(220deg, 50%, 50%);\r\n  background-color: hsl(120deg, 50%, 50%);\r\n  mix-blend-mode: hue;\r\n  animation: ${hueRotate} linear infinite 40s;\r\n  z-index: 2;\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst CubeBackground = styled.div`\r\n  background: url(${cube});\r\n  background-repeat: repeat;\r\n  width: calc(100vw + 156px);\r\n  height: calc(100vh + 300px);\r\n  z-index: 1;\r\n  position: absolute;\r\n  background-size: 156px 300px;\r\n  animation: ${translate} linear infinite 3s;\r\n`;\r\n\r\nexport default App;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport function useTime() {\r\n    const [displayedDate, setDisplayedDate] = useState(new Date())\r\n\r\n    var timeout = setTimeout(update, 0);\r\n\r\n    function update() {\r\n        const now = new Date();\r\n        setDisplayedDate(now);\r\n        const millisUntilNextUpdate = (60 - now.getSeconds()) * 1000 + 5;\r\n        timeout = setTimeout(update, millisUntilNextUpdate);\r\n    }\r\n\r\n\r\n    // cleanup\r\n    useEffect(() => {\r\n        return () => clearTimeout(timeout);\r\n    });\r\n\r\n    var hour = displayedDate.getHours() % 12;\r\n    if (hour === 0)\r\n    hour = 12;\r\n\r\n    return hour\r\n     + \":\"\r\n     + zeroPad(displayedDate.getMinutes())\r\n}\r\n\r\n/// Given a positive integer, returns it as a string\r\n/// Zero-pads it to two digits, e.g. 5 -> 05\r\nfunction zeroPad(num: number): string {\r\n    if (num < 10)\r\n        return `0${num}`\r\n    else\r\n        return num.toString()\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}